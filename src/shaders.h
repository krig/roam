/*
 * To be included only in main.c
 */

static const char* basic_vshader = "#version 330\n"
	"uniform mat4 projmat;\n"
	"uniform mat4 modelview;\n"
	"uniform mat3 normalmat;\n"
	"layout (location = 0) in vec3 position;\n"
	"layout (location = 1) in vec3 normal;\n"
	"layout (location = 2) in vec4 color;\n"
	"out vec3 out_normal;\n"
	"out vec4 out_color;\n"
	"out float out_depth;\n"
	"void main() {\n"
	"    out_color = color;\n"
	"    out_depth = length((modelview * vec4(position, 1)).xyz);\n"
	"    out_normal = normalmat * normal;\n"
	"    gl_Position = projmat * modelview * vec4(position, 1);\n"
	"}\n";

static const char* basic_fshader = "#version 330\n"
	"precision highp float;\n"
	"uniform vec3 amb_light;\n"
	"uniform vec4 fog_color;\n"
	"uniform vec3 light_dir;\n"
	"in vec3 out_normal;\n"
	"in vec4 out_color;\n"
	"in float out_depth;\n"
	"out vec4 fragment;\n"
	"vec3 fog(vec3 color, vec3 fcolor, float depth, float density){\n"
	"    const float e = 2.71828182845904523536028747135266249;\n"
	"    float f = pow(e, -pow(depth*density, 2));\n"
	"    return mix(fcolor, color, f);\n"
	"}\n"
	"void main() {\n"
	"    float intensity = max(0.0, dot(normalize(out_normal), normalize(light_dir)));\n"
	"    vec3 basecolor = out_color.xyz * intensity + amb_light.xyz * (1.0 - intensity);\n"
	"    vec3 fogged = fog(basecolor, fog_color.xyz, out_depth, fog_color.w);\n"
	"    fragment = vec4(fogged, 1);\n"
	"}\n";

static const char* ui_vshader = "#version 330\n"
	"uniform vec2 screensize;\n"
	"layout (location = 0) in vec2 position;\n"
	"layout (location = 1) in vec2 texcoord;\n"
	"layout (location = 2) in vec4 color;\n"
	"out vec2 out_texcoord;\n"
	"out vec4 out_color;\n"
	"void main() {\n"
	"    vec2 offset = screensize/2;\n"
	"    vec2 eyepos = (position - offset) / offset;\n"
	"    out_texcoord = texcoord;\n"
	"    out_color = color;\n"
	"    gl_Position = vec4(eyepos, 0, 1);\n"
	"}\n";

static const char* ui_fshader = "#version 330\n"
	"precision highp float;\n"
	"in vec2 out_texcoord;\n"
	"in vec4 out_color;\n"
	"out vec4 fragment;\n"
	"uniform sampler2D tex0;\n"
	"void main() {\n"
	"    fragment = texture(tex0, out_texcoord) * out_color;\n"
	"}\n";


static const char* debug_vshader = "#version 330\n"
	"uniform mat4 projmat;\n"
	"uniform mat4 modelview;\n"
	"layout (location = 0) in vec3 position;\n"
	"layout (location = 1) in vec4 color;\n"
	"out vec4 out_color;\n"
	"void main() {\n"
	"    out_color = color;\n"
	"    vec4 sspos = projmat * modelview * vec4(position, 1);\n"
	"    sspos.z -= 0.005;\n"
	"    gl_Position = sspos;\n"
	"}\n";

static const char* debug_fshader = "#version 330\n"
	"precision highp float;\n"
	"in vec4 out_color;\n"
	"out vec4 fragment;\n"
	"void main() {\n"
	"    fragment = out_color;\n"
	"}\n";

static const char* chunk_vshader = "#version 330\n"
	"uniform mat4 projmat;\n"
	"uniform mat4 modelview;\n"
	"uniform vec3 chunk_offset;\n"
	"layout (location = 0) in vec4 position;\n"
	"layout (location = 1) in vec2 texcoord;\n"
	"layout (location = 2) in vec4 color;\n"
	"out vec2 out_texcoord;\n"
	"out vec4 out_color;\n"
	"out float out_depth;\n"
	"void main() {\n"
	"    vec3 pos = chunk_offset.xyz + position.xyz;\n"
	"    vec4 tpos = modelview * vec4(pos.xyz, 1);\n"
	"    out_color = color;\n"
	"    out_depth = length(tpos.xyz);\n"
	"    out_texcoord = texcoord;\n"
	"    gl_Position = projmat * tpos;\n"
	"}\n";

// amb_light = color and intensity of skylight
// out_color.xyz = torchlight level (rgb)
// out_color.w = sunlight level
static const char* chunk_fshader = "#version 330\n"
	"precision highp float;\n"
	"uniform vec3 amb_light;\n"
	"uniform vec4 fog_color;\n"
	"uniform sampler2D tex0;\n"
	"in vec2 out_texcoord;\n"
	"in vec4 out_color;\n"
	"in float out_depth;\n"
	"out vec4 fragment;\n"
	"vec3 fog(vec3 color, vec3 fcolor, float depth, float density){\n"
	"    const float e = 2.71828182845904523536028747135266249;\n"
	"    float f = pow(e, -pow(depth*density, 2));\n"
	"    return mix(fcolor, color, f);\n"
	"}\n"
	"void main() {\n"
	"    vec4 tex = texture(tex0, out_texcoord);\n"
	"    if (tex.w == 0) discard;\n"
	"    vec3 light = clamp(out_color.xyz + ((amb_light.xyz * out_color.w)), 0, 1);\n"
//	"    vec3 light = clamp(((amb_light.xyz * out_color.w)), 0, 1);\n"
//	"    vec3 base = light.xyz;\n"
	"    vec3 base = tex.xyz * light.xyz;\n"
//	"    fragment = vec4(base.xyz, 1);\n"
	"    vec3 fogged = fog(base, fog_color.xyz, out_depth, fog_color.w);\n"
	"    fragment = vec4(fogged.rgb, 1);\n"
	"}\n";

// TODO: color and alpha based on biome and depth
static const char* chunkalpha_fshader = "#version 330\n"
	"precision highp float;\n"
	"uniform vec3 amb_light;\n"
	"uniform vec4 fog_color;\n"
	"uniform sampler2D tex0;\n"
	"in vec2 out_texcoord;\n"
	"in vec4 out_color;\n"
	"in float out_depth;\n"
	"out vec4 fragment;\n"
	"vec3 fog(vec3 color, vec3 fcolor, float depth, float density){\n"
	"    const float e = 2.71828182845904523536028747135266249;\n"
	"    float f = pow(e, -pow(depth*density, 2));\n"
	"    return mix(fcolor, color, f);\n"
	"}\n"
	"void main() {\n"
	"    vec4 tex = texture(tex0, out_texcoord);\n"
	"    if (tex.w == 0) discard;\n"
	"    vec3 light = clamp(out_color.xyz + ((amb_light.xyz * out_color.w)), 0, 1);\n"
	"    vec3 base = tex.xyz * light.xyz;\n"
//	"    fragment = vec4(base.xyz, tex.w);\n"
	"    vec3 fogged = fog(base, fog_color.xyz, out_depth, fog_color.w);\n"
	"    fragment = vec4(fogged.rgb, tex.w);\n"
	"}\n";


static const char* sky_vshader = "#version 330\n"
	"uniform mat4 projmat;\n"
	"uniform mat4 modelview;\n"
	"layout (location = 0) in vec3 position;\n"
	"out float gradient;\n"
	"out vec3 out_normal;\n"
	"void main(){\n"
	"    gradient = position.y;\n"
	"    out_normal = normalize(-position);\n"
	"	gl_Position = projmat * modelview * vec4(position, 1.0);\n"
	"}\n";

static const char* sky_fshader = "#version 330\n"
	"precision highp float;\n"
	"uniform vec3 sun_dir;\n"
	"uniform vec3 sun_color;\n"
	"uniform vec3 sky_dark;\n"
	"uniform vec3 sky_light;\n"
	"in float gradient;\n"
	"in vec3 out_normal;\n"
	"out vec4 fragment;\n"
	"void main() {\n"
	"	float sunamt = pow(max(0.0, dot(out_normal, sun_dir)), 5.0);\n"
	"	vec3 skybase = mix(sky_light, sky_dark, clamp(gradient, 0.0, 1.0));\n"
	"	fragment = vec4(mix(skybase, sun_color, sunamt), 1);\n"
	"}\n";
